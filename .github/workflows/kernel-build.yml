name: Kernel Build with Samsung Toolchain

on:
  push:
    branches:
      - WIP  # Triggers the action on pushes to the WIP branch
  pull_request:
    branches:
      - WIP  # Optionally build on pull requests to the WIP branch

jobs:
  build:
    runs-on: ubuntu-latest  # The environment to run on (Ubuntu)

    steps:
    - name: Checkout Nethunter kernel source
      uses: actions/checkout@v3
      with:
        repository: MK-986123/Nethunter_kernel_samsung_dm3q
        ref: WIP  # Using 'WIP' branch for Nethunter kernel
        fetch-depth: 0  # Ensures full history is fetched
        clean: true  # Cleans any previous files

    - name: Checkout AnyKernel3 source
      uses: actions/checkout@v3
      with:
        repository: MK-986123/AnyKernel3
        ref: master  # Using 'master' branch for AnyKernel3
        path: AnyKernel3
        fetch-depth: 0  # Ensures full history is fetched
        clean: true  # Cleans any previous files

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang llvm lld git bc bison flex libncurses5-dev curl zip
        # Install additional dependencies required for kernel building
        sudo apt-get install -y libssl-dev libelf-dev libncurses-dev python3-pip
        pip3 install kconfiglib

    - name: Download Samsung toolchain
      run: |
        # Download and extract Samsung's ARM64 GCC toolchain
        wget https://opensource.samsung.com/uploadFile/genericFile/2022/01/20/Samsung_Exynos_ARM64_Toolchain.tar.gz
        tar -xvzf Samsung_Exynos_ARM64_Toolchain.tar.gz
        # Set the toolchain path
        export SAMSUNG_TOOLCHAIN=$(pwd)/Samsung_Exynos_ARM64_Toolchain

    - name: Configure kernel for NetHunter
      run: |
        # Export environment variables for Samsung toolchain
        export ARCH=arm64
        export CROSS_COMPILE=$SAMSUNG_TOOLCHAIN/bin/aarch64-linux-android-  # Use Samsung's toolchain
        export KERNEL_SOURCE=https://github.com/MK-986123/Nethunter_kernel_samsung_dm3q
        export CLANG_PATH=$(pwd)/clang/bin
        export PATH=$CLANG_PATH:$PATH

        # Clean any previous build artifacts
        make clean && make mrproper

        # Check the kernel configuration and enable features for NetHunter
        make kalama-gki_defconfig O=out
        make menuconfig O=out  # Optionally add kernel features if needed (HID, USB Gadget, Bluetooth, etc.)

    - name: Build the kernel with Samsung toolchain
      run: |
        # Build the kernel using Samsung's toolchain and clang
        make -j$(nproc) CC=clang LD=ld.lld KBUILD_COMPILER_STRING="Clang $(clang --version)" O=out

    - name: Package the kernel with AnyKernel3
      run: |
        # Copy compiled kernel to AnyKernel3 directory
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        
        # Create a flashable zip
        cd AnyKernel3
        zip -r9 kernel.zip ./*
        cd ..

    - name: Upload kernel.zip artifact
      uses: actions/upload-artifact@v3
      with:
        name: kernel.zip
        path: AnyKernel3/kernel.zip
