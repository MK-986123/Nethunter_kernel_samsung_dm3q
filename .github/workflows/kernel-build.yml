name: NetHunter Kernel Build Workflow

on:
  push:
    branches:
      - WIP
  pull_request:
    branches:
      - WIP

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Source Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # Step 2: Set up Proton Clang Toolchain
    - name: Clone Proton Clang Toolchain
      run: |
        git clone --depth=1 https://github.com/kdrag0n/proton-clang.git $HOME/toolchains/proton-clang
        echo "Cloning Proton Clang completed."

    # Step 3: Set up Environment Variables
    - name: Set Environment Variables
      run: |
        export PATH="$HOME/toolchains/proton-clang/bin:$PATH"
        echo "Proton Clang toolchain path set."
        echo "PATH: $PATH"

    # Step 4: Kernel Compilation Setup (for cross-compilation)
    - name: Set Compilation Variables
      run: |
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        echo "Compilation variables set for cross-compilation."

    # Step 5: Clean Kernel Source (includes distclean option for full clean)
    - name: Clean Kernel Source
      run: |
        make O=out distclean || make O=out clean && make O=out mrproper
        echo "Cleaned kernel source and build directory."

    # Step 6: Configure Kernel (using correct defconfig path)
    - name: Configure Kernel
      run: |
        make O=out ARCH=arm64 vendor/kalama-gki_defconfig KCFLAGS="-Wno-error"
        echo "Kernel configuration applied."

    # Step 7: Build the Kernel with Proton Clang
    - name: Build Kernel with Proton Clang
      run: |
        make -j$(nproc) O=out \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip
        echo "Kernel build completed."

    # Step 8: Check for Build Artifacts (Image, DTBs, etc.)
    - name: Check Artifacts
      run: |
        ls out/arch/arm64/boot/
        echo "Checking kernel build artifacts..."

    # Step 9: Archive Build Artifacts (after successful artifact check)
    - name: Archive Build Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: Kernel-Artifacts
        path: out/arch/arm64/boot/
        if-no-files-found: error

    # Step 10: Generate Flashable ZIP (Optional)
    - name: Create Flashable ZIP
      run: |
        cd anykernel3
        zip -r9 kernel.zip *
        echo "Flashable ZIP created."

    # Step 11: Upload Flashable ZIP (Optional)
    - name: Upload Flashable ZIP
      uses: actions/upload-artifact@v3
      with:
        name: Kernel-ZIP
        path: anykernel3/kernel.zip
        if-no-files-found: error
