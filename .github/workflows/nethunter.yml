name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Build-Kernel:
    name: "Build kernel"
    runs-on: ubuntu-22.04
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: $(date +'%Y%m%d')
      KERNEL_NAME: Nethunter_kernel_samsung_dm3q
      KERNEL_REPO: "https://github.com/MK-986123/Nethunter_kernel_samsung_dm3q.git"
      KERNEL_BRANCH: "WIP"
      KERNEL_DEVICE: "samsung_dm3q"
      DEFCONFIG_NAME: "vendor/kalama-gki_defconfig"
      withKernelSU: false
      useAnykernel: true
      release: true
    steps:
      - name: "Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc flex bison libssl-dev curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi lftp zstd wget libfl-dev python2 python3 libarchive-tools libelf-dev libz-dev binutils-dev
      - name: "Setup Anykernel3"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch master https://github.com/osm0sis/AnyKernel3 AnyKernel3
          echo "Setup Anykernel3 => (https://github.com/osm0sis/AnyKernel3)"

      - name: "Clone kernel source"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo "Clone kernel source => ($KERNEL_REPO)"

      - name: "Get toolchains"
        run: |
          git clone --depth=1 https://github.com/kdrag0n/proton-clang.git toolchains/proton-clang
          echo "Toolchains setup complete."

      - name: "Set args"
        id: generate-args
        env:
          THREAD: $(nproc --all)
        run: |
          ARCH=arm64
          CC=toolchains/proton-clang/bin/clang
          args="-j${{ env.THREAD }} O=${{ env.OUT_DIR }} ARCH=$ARCH CC=${{ env.WORKSPACE }}/$CC"
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: arm64
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          echo -e "CONFIG_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          cat arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: arm64
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make $args

      - name: "Upload Image"
        uses: actions/upload-artifact@v3
        with:
          name: Image-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/Image
          retention-days: 7
        continue-on-error: true

      - name: "Upload Image.gz"
        uses: actions/upload-artifact@v3
        with:
          name: Image.gz-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz
          retention-days: 7
        continue-on-error: true

      - name: "Upload dtb"
        uses: actions/upload-artifact@v3
        with:
          name: dtb-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/dtb
          retention-days: 7
        continue-on-error: true

      - name: "Upload dtbo.img"
        uses: actions/upload-artifact@v3
        with:
          name: dtbo.img-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img
          retention-days: 7
        continue-on-error: true

      - name: "Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: arm64
          anykernel: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
        run: |
          ls -al
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz-dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz-dtb ./AnyKernel3/
          fi
          cd AnyKernel3/
          zip -q -r "${{ env.anykernel }}.zip" *

      - name: "Upload AnyKernel3 image"
        uses: actions/upload-artifact@v3
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
          path: AnyKernel3/*

      - name: "Create GitHub Release"
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        with:
          tag_name: v${{ env.builddate }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip"
          generate_release_notes: true
